ğŸ”¹ 1. Convention

DÃ©finition :
Une convention est un ensemble de rÃ¨gles partagÃ©es entre dÃ©veloppeurs pour garder un dÃ©pÃ´t cohÃ©rent, lisible et facile Ã  maintenir (ex. : nommage des variables, structure des dossiers, style de code).

Comment lâ€™utiliser :

DÃ©finir les conventions dans un fichier CONTRIBUTING.md ou README.md.

Par exemple : dÃ©cider que toutes les variables JS doivent Ãªtre en camelCase, que les composants React commencent par une majuscule, etc.

Faire respecter ces conventions via des revues de code, linting ou formatters.

ğŸ”¹ 2. Lint

DÃ©finition :
Un linter est un outil dâ€™analyse statique du code qui dÃ©tecte automatiquement des erreurs de syntaxe, de style ou de bonnes pratiques (ex. : oubli de point-virgule, variable non utilisÃ©e).

Comment lâ€™utiliser :

Installer un linter adaptÃ© au langage :

JavaScript/TypeScript : ESLint

Python : Flake8 ou Pylint

Exemple avec ESLint :

npm install eslint --save-dev
npx eslint .


Configurer des rÃ¨gles dans .eslintrc.json.

IntÃ©grer le linter dans la CI/CD pour bloquer du code non conforme.

ğŸ”¹ 3. Format

DÃ©finition :
Un formatter applique automatiquement un style de code dÃ©fini (indentation, espaces, guillemets, etc.), contrairement au linter qui signale seulement les erreurs.

Comment lâ€™utiliser :

Outil courant : Prettier pour JS/TS.

Installation :

npm install prettier --save-dev
npx prettier --write .


Configurer les rÃ¨gles dans .prettierrc.

Ajouter un hook Git (avec Husky) pour formatter avant chaque commit.

ğŸ”¹ 4. Conventional Commits

DÃ©finition :
Un standard pour rÃ©diger les messages de commit afin de les rendre lisibles et exploitables automatiquement (changlog, versioning).

Format :

<type>(scope): message


Exemples :

feat(auth): ajout du login avec Google

fix(api): correction du timeout

docs(readme): ajout dâ€™exemples

Comment lâ€™utiliser :

Suivre la convention Ã  chaque commit.

Installer un outil de validation comme commitlint pour bloquer les mauvais messages :

npm install @commitlint/config-conventional @commitlint/cli --save-dev
echo "module.exports = {extends: ['@commitlint/config-conventional']}" > commitlint.config.js

ğŸ”¹ 5. EditorConfig

DÃ©finition :
Un fichier .editorconfig qui dÃ©finit des rÃ¨gles dâ€™Ã©dition (indentation, charset, fin de ligneâ€¦) pour que tous les contributeurs aient les mÃªmes rÃ©glages, quel que soit leur Ã©diteur.

Comment lâ€™utiliser :

CrÃ©er un fichier .editorconfig Ã  la racine :

root = true

[*]
indent_style = space
indent_size = 2
end_of_line = lf
charset = utf-8
trim_trailing_whitespace = true
insert_final_newline = true


Installer le plugin EditorConfig dans VS Code, IntelliJ, etc.

Les rÃ©glages seront appliquÃ©s automatiquement quand on Ã©dite les fichiers.